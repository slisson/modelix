import java.text.SimpleDateFormat

buildscript {
    ext.kotlinVersion = '1.4.31'

    repositories {
        /* It is useful to have the central maven repo before the Itemis's one
           as it is more reliable */
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        maven { url uri("${projectDir}/itemis-nexus-mirror") }
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.168.+'
        classpath 'com.google.googlejavaformat:google-java-format:1.8+'
    }
}

plugins {
    id "org.jetbrains.kotlin.multiplatform" version "${kotlinVersion}" apply false
    id "org.jlleitschuh.gradle.ktlint" version "9.3.0" apply false
    id "com.diffplug.gradle.spotless" version "4.5.1" apply false
}

if (System.getenv("NEXUS_USERNAME") != null) ext.nexusUsername = System.getenv("NEXUS_USERNAME")
if (System.getenv("NEXUS_PASSWORD") != null) ext.nexusPassword = System.getenv("NEXUS_PASSWORD")

def mpsVersionProps = new Properties()
file("mps-version.properties").withInputStream { mpsVersionProps.load(it) }
ext.mpsMajorVersion = mpsVersionProps.getProperty("mpsMajorVersion")
ext.mpsMinorVersion = mpsVersionProps.getProperty("mpsMinorVersion")
ext.mpsVersion = mpsVersionProps.getProperty("mpsVersion")
ext.mpsExtensionsVersion = mpsVersionProps.getProperty("mpsExtensionsVersion")
if (mpsExtensionsVersion == null || mpsExtensionsVersion.length() == 0) {
    ext.mpsExtensionsVersion = "$mpsMajorVersion+"
}

import de.itemis.mps.gradle.GitBasedVersioning
def versionFile = new File("$rootDir/modelix.version")
if (System.getenv("TRAVIS_TAG") != null && !System.getenv("TRAVIS_TAG").isEmpty()) {
    ext.modelixVersion = System.getenv("TRAVIS_TAG")
} else if (project.hasProperty("teamcity")) {
    def buildNumber = System.env.BUILD_NUMBER.toInteger()
    def branch = GitBasedVersioning.gitBranch
    if (branch.matches(/(refs[\/-])?tags[\/-].+/)) {
        if (branch.startsWith("refs/tags/")) branch = branch.substring("refs/tags/".length())
        if (branch.startsWith("refs-tags-")) branch = branch.substring("refs-tags-".length())
        if (branch.startsWith("tags/")) branch = branch.substring("tags/".length())
        if (branch.startsWith("tags-")) branch = branch.substring("tags/".length())
        ext.modelixVersion = branch
    } else {
        def hash = GitBasedVersioning.gitShortCommitHash
        ext.modelixVersion = "${branch}.${buildNumber}.${hash}"
        println "##teamcity[buildNumber '${modelixVersion}']"
    }
} else if (versionFile.exists()) {
    ext.modelixVersion = versionFile.text.trim()
} else {
    ext.modelixVersion = "$mpsVersion-" + new SimpleDateFormat("yyyyMMddHHmm").format(new Date()) + "-SNAPSHOT"
}
versionFile.write(ext.modelixVersion)
println("modelix version: " + ext.modelixVersion)

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = modelixVersion.endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

allprojects {
    group 'org.modelix'
    version modelixVersion

    repositories {
        /* It is useful to have the central maven repo before the Itemis's one
           as it is more reliable */
        maven { url "https://repo.maven.apache.org/maven2" }
        mavenCentral()
        maven { url uri("${projectDir}/itemis-nexus-mirror") }
        mavenLocal()
        maven { url 'https://projects.itemis.de/nexus/content/groups/OS/' }
    }
}
description = "Cloud storage and web UI for MPS"

defaultTasks 'assemble'
